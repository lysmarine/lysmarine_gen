#!/bin/sh

PREREQ=""

prereqs() {
  echo "${PREREQ}"
}

case "$1" in
prereqs)
  prereqs
  exit 0
  ;;
esac

. /scripts/functions

msgPrefix=' Lysmarine '

# NOTE: ${ROOT} and ${rootmnt} are set by parent script, their values might be:
# ${ROOT} = /dev/mmcblk0p2
# ${rootmnt} = /root

# The linux kernel have a arbitrary wait time before mounting the USB drives.
sleep  $(cat /sys/module/usb_storage/parameters/delay_use)

# NOTE: In case of many partition having the label, blkid will only return the last one.
userOverlayDevice=$(blkid -L useroverlay)
rootfsDevice=$(blkid -L rootfs)

if [ -z "${userOverlayDevice}" ]; then
  echo "${msgPrefix} No partition name useroverlay have been found. No overlay will be setup over rootfs."
  echo 0
fi

userOverlayDevicePartNo=$(echo "${userOverlayDevice}" | grep -o '[0-9]*$')
partField=$(echo "${userOverlayDevice}" | grep -Eo "p?${userOverlayDevicePartNo}$")
userOverlayDisc=$(echo "${userOverlayDevice}" | sed "s/${partField}$//")

# Get the last sector of the current partition so we can check if there is empty space after it.
userOverlayDeviceLastSector=$( fdisk -l $userOverlayDisc | grep $userOverlayDevice | tr -s ' ' | cut  -d ' ' -f3 )
echo "userOverlayDeviceLastSector $userOverlayDeviceLastSector"
emptySpaceStartSector=$(($userOverlayDeviceLastSector+1))
unusedSpaceAllocation=$(echo "F\n" | fdisk /dev/mmcblk0 | grep -e "^ *${emptySpaceStartSector} ")

# If there is unused space found after the "useroverlay" partition, expends the partition to use it all.
if [ ! -z "${unusedSpaceAllocation}" ]; then
  echo "${msgPrefix} Resizing partition, This may take a while ... "
  parted ${userOverlayDisc}  --script "resizepart ${userOverlayDevicePartNo} 100%"
  resize2fs "${userOverlayDevice}"
  echo "${msgPrefix} Done Resizing partition."
fi

#List chunks of free space :

[[ ! -d /run/lysmarine/useroverlay ]] && mkdir -p /run/lysmarine/useroverlay

echo "${msgPrefix} Mounting useroverlay partition over rootfs"
mount $userOverlayDevice -o defaults,noatime /run/lysmarine/useroverlay
if [ $? -ne 0 ]; then
  echo "${msgPrefix} Failed to mount ${userOverlayDevice}"
fi

[[ ! -d /run/lysmarine/useroverlay/rootfs ]] && mkdir -p /run/lysmarine/useroverlay/rootfs
[[ ! -d /run/lysmarine/useroverlay/upper ]] && mkdir -p /run/lysmarine/useroverlay/upper
[[ ! -d /run/lysmarine/useroverlay/work ]] && mkdir -p /run/lysmarine/useroverlay/work
[[ ! -d /run/lysmarine/useroverlay/merged ]] && mkdir -p /run/lysmarine/useroverlay/merged

mount -o move ${rootmnt} /run/lysmarine/useroverlay/rootfs
if [ $? -ne 0 ]; then
  echo "${msgPrefix} Failed to mount ${rootfsDevice}"
fi

mount -v -t overlay overlay -o lowerdir=/run/lysmarine/useroverlay/rootfs,upperdir=/run/lysmarine/useroverlay/upper,workdir=/run/lysmarine/useroverlay/work ${rootmnt}
if [ $? -ne 0 ]; then
  echo "${msgPrefix} Failed to mount overlay"
  panic "${$msgPrefix} Merge failed"
fi

echo "${msgPrefix} Moving mount points to the new merged rootfs"
mkdir -p ${rootmnt}/run/lysmarine/useroverlay
mount -o move /run/lysmarine/useroverlay ${rootmnt}/run/lysmarine/useroverlay

echo "${msgPrefix} Adjusting fstab"
rootfsFilesystemType=$(grep $rootfsDevice /proc/mounts | cut -d' ' -f3)
rootfsMountOpt=$(grep $rootfsDevice /proc/mounts | cut -d' ' -f4)
rootfsFstabEntry="${ROOT} /run/lysmarine/useroverlay/rootfs ${rootfsFilesystemType} ${rootfsMountOpt} 0 0"
overlayfsFstabEntry="${userOverlayDevice} /run/lysmarine/useroverlay ext4 defaults,noatime 0 0"

grep -v ' / ' ${rootmnt}/run/lysmarine/useroverlay/rootfs/etc/fstab >${rootmnt}/etc/fstab
echo $rootfsFstabEntry >>${rootmnt}/etc/fstab
echo $overlayfsFstabEntry >>${rootmnt}/etc/fstab

exit 0